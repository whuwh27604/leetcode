/* 好分区的数目.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
给你一个正整数数组 nums 和一个整数 k 。

分区 的定义是：将数组划分成两个有序的 组 ，并满足每个元素 恰好 存在于 某一个 组中。如果分区中每个组的元素和都大于等于 k ，则认为分区是一个好分区。

返回 不同 的好分区的数目。由于答案可能很大，请返回对 109 + 7 取余 后的结果。

如果在两个分区中，存在某个元素 nums[i] 被分在不同的组中，则认为这两个分区不同。



示例 1：

输入：nums = [1,2,3,4], k = 4
输出：6
解释：好分区的情况是 ([1,2,3], [4]), ([1,3], [2,4]), ([1,4], [2,3]), ([2,3], [1,4]), ([2,4], [1,3]) 和 ([4], [1,2,3]) 。
示例 2：

输入：nums = [3,3,3], k = 4
输出：0
解释：数组中不存在好分区。
示例 3：

输入：nums = [6,6], k = 2
输出：2
解释：可以将 nums[0] 放入第一个分区或第二个分区中。
好分区的情况是 ([6], [6]) 和 ([6], [6]) 。


提示：

1 <= nums.length, k <= 1000
1 <= nums[i] <= 109
*/

#include <iostream>
#include <numeric>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    int countPartitions(vector<int>& nums, int k) {
        long long sum = accumulate(nums.begin(), nums.end(), 0L);
        if (sum < 2 * (long long)k) {  // sum小于2k时肯定无解。sum大于2k，确保下面dp求bad时，单边小于k，另一边一定大于k
            return 0;
        }

        int size = nums.size(), mod = 1000000007;
        return (countTotal(size, mod) + mod - countBad(nums, k, mod)) % mod;
    }

    int countTotal(int size, int mod) {
        int total = 1;

        for (int i = 0; i < size; ++i) {
            total = total * 2 % mod;
        }

        return total;
    }

    int countBad(vector<int>& nums, int k, int mod) {
        int size = nums.size(), sum = 0;
        vector<int> dp(k, 0);
        dp[0] = 1;

        for (int i = 0; i < size; ++i) {
            int num = nums[i];
            for (int j = k - 1; j >= num; --j) {
                dp[j] = (dp[j] + dp[j - num]) % mod;
            }
        }

        for (int j = 0; j < k; ++j) {
            sum = (sum + dp[j]) % mod;
        }

        return sum * 2 % mod;
    }
};

int main()
{
    CheckResult check;
    Solution o;

    vector<int> nums = { 1,2,3,4 };
    check.checkInt(6, o.countPartitions(nums, 4));

    nums = { 3,3,3 };
    check.checkInt(0, o.countPartitions(nums, 4));

    nums = { 6,6 };
    check.checkInt(2, o.countPartitions(nums, 2));

    nums = { 367,160,643,105,915,595,517,327,57,638,609,181,595,341,901,365,990,55,496,232,840,825,19,482,910,109,926,169,1,325,252,593,11,583,239,840,928,423,620,829,706,313,445,135,981,285,780,5,678,117,376,494,383,681,244,989,780,493,697,203,810,833,138,555,411,109,832,504,325,758,404,323,709,831,311,870,360,322,866,10,959,543,54,715,638,804,263,663,441,702,473,309,279,143,924,298,712,80,122,863,880,289,682,517,471,4,985,743,501,157,381,22,914,293,332,8,604,410,519,889,162,722,676,601,910,54,536,220,89,501,411,754,409,527,714,395,915,338,442,822,70,839,15,451,937,47,88,988,608,357,385,952,766,917,543,810,217,47,717,306,201,91,93,135,418,56,519,269,855,755,98,735,414,742,552,885,183,694,463,292,318,239,459,763,698,447,506,657,108,185,666,697,849,782,461,285,950,704,951,846,86,600,429,111,520,14,576,591,602,678,961,2,766,710,643,385,465,66,748,528,758,1,54,969,635,588,625,44,927,921,9,50,632,77,735,977,521,64,282,362,996,561,125,319,556,209,855,280,613,432,93,126,427,780,969,933,809,637,294,225,367,351,290,406,35,460,153,625,695,77,389,279,648,804,65,624,405,428,49,851,515,449,340,43,708,405,201,283,779,201,306,707,372,15,971,566,828,819,537,747,730,764,141,248,768,195,986,834,775,719,969,23,866,724,780,24,744,727,53,414,100,246,506,364,315,142,516,66,947,669,272,753,621,169,73,169,930,345,767,555,82,806,312,552,57,432,759,942,339,385,242,297,120,785,443,843,642,224,873,556,278,855,273,803,597,288,478,300,894,462,354,901,366,489,664,551,758,727,528,276,228,890,602,768,752,577,586,92,97,956,688,438,501,372,20,352,308,923,545 };
    check.checkInt(435755470, o.countPartitions(nums, 787));

    nums = { 96,40,22,98,9,97,45,22,79,57,95,62 };
    check.checkLongLong(0, o.countPartitions(nums, 505));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
