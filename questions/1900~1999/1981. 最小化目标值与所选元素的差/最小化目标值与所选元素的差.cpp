/* 最小化目标值与所选元素的差.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
给你一个大小为 m x n 的整数矩阵 mat 和一个整数 target 。

从矩阵的 每一行 中选择一个整数，你的目标是 最小化 所有选中元素之 和 与目标值 target 的 绝对差 。

返回 最小的绝对差 。

a 和 b 两数字的 绝对差 是 a - b 的绝对值。

 

示例 1：



输入：mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13
输出：0
解释：一种可能的最优选择方案是：
- 第一行选出 1
- 第二行选出 5
- 第三行选出 7
所选元素的和是 13 ，等于目标值，所以绝对差是 0 。
示例 2：



输入：mat = [[1],[2],[3]], target = 100
输出：94
解释：唯一一种选择方案是：
- 第一行选出 1
- 第二行选出 2
- 第三行选出 3
所选元素的和是 6 ，绝对差是 94 。
示例 3：



输入：mat = [[1,2,9,8,7]], target = 6
输出：1
解释：最优的选择方案是选出第一行的 7 。
绝对差是 1 。
 

提示：

m == mat.length
n == mat[i].length
1 <= m, n <= 70
1 <= mat[i][j] <= 70
1 <= target <= 800

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimize-the-difference-between-target-and-chosen-elements
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <iostream>
#include <algorithm>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    int minimizeTheDifference(vector<vector<int>>& mat, int target) {
        int i, j, k, row = mat.size(), column = mat[0].size(), inf = 1000000000, minLarger = inf;
        vector<bool> sums(target + 1, false);
        sums[0] = true;

        for (i = 0; i < row; ++i) {
            vector<bool> tmp(target + 1, false);
            int minNum = inf, tmpMinLarger = inf;

            for (j = 0; j < column; ++j) {
                minNum = min(minNum, mat[i][j]);

                for (k = 0; k <= target; ++k) {
                    if (sums[k]) {
                        if (k + mat[i][j] <= target) {
                            tmp[k + mat[i][j]] = true;
                        }
                        else {
                            tmpMinLarger = min(tmpMinLarger, k + mat[i][j]);
                        }
                    }
                }
            }

            sums = tmp;
            minLarger = min(minLarger + minNum, tmpMinLarger);
        }

        k = target;
        while (k >= 0 && !sums[k]) {
            --k;
        }

        return k == -1 ? minLarger - target : min(target - k, minLarger - target);
    }
};

int main()
{
    CheckResult check;
    Solution o;

    vector<vector<int>> mat = { {1,2,3},{4,5,6},{7,8,9} };
    check.checkInt(0, o.minimizeTheDifference(mat, 13));

    mat = { {1},{2},{3} };
    check.checkInt(94, o.minimizeTheDifference(mat, 100));

    mat = { {1,2,9,8,7} };
    check.checkInt(1, o.minimizeTheDifference(mat, 6));

    mat = { {15,15},{5,15},{2,15} };
    check.checkInt(3, o.minimizeTheDifference(mat, 29));

    mat = { {10,3,7,7,9,6,9,8,9,5},{1,1,6,8,6,7,7,9,3,9},{3,4,4,1,3,6,3,3,9,9},{6,9,9,3,8,7,9,6,10,6} };
    check.checkInt(3, o.minimizeTheDifference(mat, 5));

    mat = { {18,49,33,11,40,27,15,39,17,3,44,2},
        {38,31,7,3,35,3,18,41,30,37,38,23},
        {33,18,8,31,8,49,36,45,13,21,34,37},
        {35,28,42,38,6,7,35,6,3,32,36,7},
        {39,7,50,23,11,33,15,31,5,21,29,25},
        {40,16,39,3,16,29,30,34,12,45,28,13},
        {3,38,32,30,7,25,44,8,43,16,18,15},
        {30,18,20,18,32,16,46,36,20,28,30,16},
        {19,28,37,35,25,29,50,27,37,46,17,43},
        {42,36,41,33,3,41,35,17,48,41,35,27},
        {14,44,17,15,41,34,28,37,32,46,42,37},
        {41,2,17,27,3,26,5,30,38,24,11,30},
        {44,19,25,8,4,25,36,35,45,4,43,6},
        {10,16,17,16,11,34,44,31,41,40,29,10},
        {37,25,46,5,14,16,1,40,18,28,20,12},
        {24,25,39,31,39,47,4,19,13,35,42,46},
        {13,8,34,20,19,19,19,8,38,39,45,37},
        {44,42,9,25,16,12,37,41,4,38,17,32},
        {14,7,20,7,39,18,4,46,33,10,32,16},
        {2,41,24,23,22,30,28,18,28,1,8,5},
        {14,39,46,49,7,28,18,32,31,13,30,42},
        {3,21,23,18,14,41,1,18,28,36,47,20},
        {47,32,41,12,18,6,48,14,4,9,24,48},
        {31,37,50,11,33,32,40,9,13,17,13,30},
        {42,9,35,24,50,48,5,25,37,3,44,21},
        {45,31,29,4,25,17,36,41,4,39,40,24},
        {16,30,32,13,11,33,28,14,20,1,18,20},
        {49,39,10,39,19,30,37,2,7,16,50,2},
        {14,39,12,4,28,15,22,30,15,39,18,3},
        {2,32,24,34,1,39,28,20,1,22,31,2},
        {1,34,43,8,24,7,9,34,32,29,50,39},
        {45,24,29,23,43,44,4,26,1,49,3,28},
        {29,9,6,40,2,37,49,25,13,9,43,9},
        {37,40,14,9,19,36,47,4,7,30,15,25},
        {44,17,9,37,14,34,31,22,38,28,14,12},
        {2,28,22,26,29,26,28,32,22,27,15,35},
        {37,39,10,29,26,47,32,26,9,38,48,40} };
    check.checkInt(59, o.minimizeTheDifference(mat, 119));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
