/* 统计特殊子序列的数目.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
特殊序列 是由 正整数 个 0 ，紧接着 正整数 个 1 ，最后 正整数 个 2 组成的序列。

比方说，[0,1,2] 和 [0,0,1,1,1,2] 是特殊序列。
相反，[2,1,0] ，[1] 和 [0,1,2,0] 就不是特殊序列。
给你一个数组 nums （仅 包含整数 0，1 和 2），请你返回 不同特殊子序列的数目 。由于答案可能很大，请你将它对 109 + 7 取余 后返回。

一个数组的 子序列 是从原数组中删除零个或者若干个元素后，剩下元素不改变顺序得到的序列。如果两个子序列的 下标集合 不同，那么这两个子序列是 不同的 。

 

示例 1：

输入：nums = [0,1,2,2]
输出：3
解释：特殊子序列为 [0,1,2,2]，[0,1,2,2] 和 [0,1,2,2] 。
示例 2：

输入：nums = [2,2,0,0]
输出：0
解释：数组 [2,2,0,0] 中没有特殊子序列。
示例 3：

输入：nums = [0,1,2,0,1,2]
输出：7
解释：特殊子序列包括：
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
 

提示：

1 <= nums.length <= 105
0 <= nums[i] <= 2

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-number-of-special-subsequences
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <iostream>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    int countSpecialSubsequences(vector<int>& nums) {
        long long total0 = 0 , total1 = 0, total2 = 0, mod = 1000000007;

        for (int num : nums) {
            if (num == 0) {
                total0 = (total0 + total0 + 1) % mod;  // nums[0,i-1]以0结尾的序列有total0个，以nums[i]为结尾的序列有total0 + 1个
            }
            else if (num == 1) {
                total1 = (total0 + total1 + total1) % mod;  // nums[0,i-1]以0结尾的序列有total0个，以1为结尾的序列有total1个，这些序列加上nums[i]都构成以1结尾的序列
            }
            else {
                total2 = (total1 + total2 + total2) % mod;  // nums[0,i-1]以1结尾的序列有total1个，以2为结尾的序列有total2个，这些序列加上nums[i]都构成以2结尾的序列
            }
        }

        return (int)total2;
    }
};

int main()
{
    CheckResult check;
    Solution o;

    vector<int> nums = { 0,1,2,2 };
    check.checkInt(3, o.countSpecialSubsequences(nums));

    nums = { 2,2,0,0 };
    check.checkInt(0, o.countSpecialSubsequences(nums));

    nums = { 0,1,2,0,1,2 };
    check.checkInt(7, o.countSpecialSubsequences(nums));

    nums = { 2,0,0,1,2,0,2,1,2,2,2,2,2,2,1,0,2,0,2,2,1,1,2,1,1,0,1,0,2,1,2,0,1,2,1,2,0,0,2,0,2,1,0,0,0,1,1,0,1,2,1,2,2,0,1,2,0,0,1,2,1,1,2,0,1,2,1,0,1,0,1,1,2,0,0,0,1,1,1,2,1,0,0,0,0,2,2,1,1,1,2,1,2,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,2,1,1,0,0,2,0,2,2,1,0,2,2,2,0,0,1,2,1,1,2,1,2,1,1,1,1,2,0,2,0,1,0,2,0,2,0,0,1,2,1,1,0,2,0,1,0,2,1,1,0,0,1,1,0,1,0,2,1,2,0,0,0,1,1,1,1,1,1,2,2,0,2,2,2,1,0,0,0,1,1,0,2,1,1,2,1,0,1,0,0,2,1,0,2,1,1,1,0,2,2,2,1,1,0,2,1,0,1,0,0,2,1,2,0,0,2,1,1,0,1,1,1,1,1,1,2,1,2,1,1,0,0,2,0,1,0,0,0,2,1,1,2,1,1,0,0,2,0,1,2,1,1,1,0,2,1,1,0,0,1,2,1,1,1,2,0,1,0,2,2,2,2,0,2,2,2,2,0,1,0,2,1,1,2,1,2,1,2,2,1,2,0,2,2,0,0,2,0,1,2,2,2,2,0,1,1,0,0,1,2,0,2,2,1,1,1,0,1,1,0,1,1,2,0,2,0,1,1,0,0,2,0,2,1,2,1,1,0,0,2,2,1,0,0,0,0,0,1,2,0,0,0,1,1,1,1,2,0,1,1,0,0,0,1,0,2,1,0,2,0,1,0,2,0,1,1,2,2,0,1,0,0,2,1,1,2,1,1,2,2,0,1,2,0,2,2,0,0,2,0,0,2,2,2,2,2,0,1,2,0,1,0,1,1,0,1,1,2,1,0,1,2,1,2,1,1,1,2,2,1,0,1,1,2,2,2,0,0,1,2,1,2,2,1,1,0,2,2,2,2,2,1,1,2,2,2,0,0,0,2,2,0,1,1,1,1,0,1,0,0,1,2,0 };
    check.checkInt(782041255, o.countSpecialSubsequences(nums));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
