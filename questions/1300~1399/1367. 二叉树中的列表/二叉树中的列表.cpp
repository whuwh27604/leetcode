/* 二叉树中的列表.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
给你一棵以 root 为根的二叉树和一个 head 为第一个节点的链表。

如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以 head 为首的链表中每个节点的值，那么请你返回 True ，否则返回 False 。

一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。

 

示例 1：



输入：head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
输出：true
解释：树中蓝色的节点构成了与链表对应的子路径。
示例 2：



输入：head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
输出：true
示例 3：

输入：head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
输出：false
解释：二叉树中不存在一一对应链表的路径。
 

提示：

二叉树和链表中的每个节点的值都满足 1 <= node.val <= 100 。
链表包含的节点数目在 1 到 100 之间。
二叉树包含的节点数目在 1 到 2500 之间。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/linked-list-in-binary-tree
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <iostream>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    bool isSubPath(ListNode* head, TreeNode* root) {
        vector<int> nums;
        list2Vector(head, nums);

        vector<int> PMT(nums.size(), 0);
        createPMT(nums, PMT);

        return DFS(root, nums, PMT, 0);
    }

    bool DFS(TreeNode* root, vector<int>& nums, vector<int>& PMT, int start) {
        if (start == nums.size()) {
            return true;
        }

        if (root == NULL) {
            return false;
        }

        while (root->val != nums[start] && start != 0) {
            start = PMT[start - 1];
        }

        if (root->val == nums[start]) {
            start += 1;
        }

        return DFS(root->left, nums, PMT, start) || DFS(root->right, nums, PMT, start);
    }

    void list2Vector(ListNode* head, vector<int>& nums) {
        while (head != NULL) {
            nums.push_back(head->val);
            head = head->next;
        }
    }

    void createPMT(vector<int>& nums, vector<int>& PMT) {
        int position, len, index, size = nums.size();

        for (position = 0; position < size; ++position) {  // 计算每个位置的匹配表
            for (len = position; len > 0; --len) {  // 对每个字符串，遍历它所有长度的前后缀
                for (index = 0; index < len; ++index) {  // 检查前后缀是否相等
                    if (nums[index] != nums[position - len + 1 + index]) {
                        break;
                    }
                }

                if (index == len) {
                    PMT[position] = len;  // 前后缀相等，更新匹配长度。
                    break;  // 由于len是递减的，所以第一次匹配的长度一定是最长的
                }
            }
        }
    }
};

int main()
{
    CheckResult check;
    Solution o;

    vector<int> values = { 4,2,8 };
    ListNode* head = createList(values);
    values = { 1,4,4,INT_MIN,2,2,INT_MIN,1,INT_MIN,6,8,INT_MIN,INT_MIN,INT_MIN,INT_MIN,1,3 };
    check.checkBool(true, o.isSubPath(head, createTree(values)));

    values = { 1,4,2,6 };
    head = createList(values);
    values = { 1,4,4,INT_MIN,2,2,INT_MIN,1,INT_MIN,6,8,INT_MIN,INT_MIN,INT_MIN,INT_MIN,1,3 };
    check.checkBool(true, o.isSubPath(head, createTree(values)));

    values = { 1,4,2,6,8 };
    head = createList(values);
    values = { 1,4,4,INT_MIN,2,2,INT_MIN,1,INT_MIN,6,8,INT_MIN,INT_MIN,INT_MIN,INT_MIN,1,3 };
    check.checkBool(false, o.isSubPath(head, createTree(values)));

    values = { 2,1,2,1,2,2,2,2,1,2 };
    head = createList(values);
    values = { 2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2 };
    check.checkBool(true, o.isSubPath(head, createTree(values)));

    values = { 2,1,2,1,2,2,2,2,1,2,1,2,2,2,1,1,2,1,2,1,2,1,2,1,1,2,2,1,1,2,1,2,1,2,2,2,2,2,2,1,2,1,1,1,2,1,2,2,1,1,2,1,2,1,1,2,2,2,1,1,2,2,2,1,1,2,2,2,2,2,2,2,1,1,1,2,1,2,2,1,1,2,1,2,1,1,2,1,1,2,2,2,2,1,2,1,2,1,1,1 };
    head = createList(values);
    values = { 2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,1,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,1,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,1,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,1,1,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,1,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,1,1,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,2,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,1,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,2,2,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,2,INT_MIN,1,INT_MIN,1,2,1,INT_MIN,INT_MIN,INT_MIN,1,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,1,2,INT_MIN,INT_MIN,INT_MIN,1,2,1,INT_MIN,INT_MIN,1,1,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,1,INT_MIN,1,INT_MIN,1,2,2,INT_MIN,INT_MIN,INT_MIN,2,INT_MIN,2,1,1,INT_MIN,INT_MIN,INT_MIN,1,INT_MIN,1,INT_MIN,1,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,2,INT_MIN,1 };
    check.checkBool(true, o.isSubPath(head, createTree(values)));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
