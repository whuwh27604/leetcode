/* 解出数学表达式的学生分数.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
给你一个字符串 s ，它 只 包含数字 0-9 ，加法运算符 '+' 和乘法运算符 '*' ，这个字符串表示一个 合法 的只含有 个位数数字 的数学表达式（比方说 3+5*2）。有 n 位小学生将计算这个数学表达式，并遵循如下 运算顺序 ：

按照 从左到右 的顺序计算 乘法 ，然后
按照 从左到右 的顺序计算 加法 。
给你一个长度为 n 的整数数组 answers ，表示每位学生提交的答案。你的任务是给 answer 数组按照如下 规则 打分：

如果一位学生的答案 等于 表达式的正确结果，这位学生将得到 5 分。
否则，如果答案由 一处或多处错误的运算顺序 计算得到，那么这位学生能得到 2 分。
否则，这位学生将得到 0 分。
请你返回所有学生的分数和。

 

示例 1：



输入：s = "7+3*1*2", answers = [20,13,42]
输出：7
解释：如上图所示，正确答案为 13 ，因此有一位学生得分为 5 分：[20,13,42] 。
一位学生可能通过错误的运算顺序得到结果 20 ：7+3=10，10*1=10，10*2=20 。所以这位学生得分为 2 分：[20,13,42] 。
所有学生得分分别为：[2,5,0] 。所有得分之和为 2+5+0=7 。
示例 2：

输入：s = "3+5*2", answers = [13,0,10,13,13,16,16]
输出：19
解释：表达式的正确结果为 13 ，所以有 3 位学生得到 5 分：[13,0,10,13,13,16,16] 。
学生可能通过错误的运算顺序得到结果 16 ：3+5=8，8*2=16 。所以两位学生得到 2 分：[13,0,10,13,13,16,16] 。
所有学生得分分别为：[5,0,0,5,5,2,2] 。所有得分之和为 5+0+0+5+5+2+2=19 。
示例 3：

输入：s = "6+0*1", answers = [12,9,6,4,8,6]
输出：10
解释：表达式的正确结果为 6 。
如果一位学生通过错误的运算顺序计算该表达式，结果仍为 6 。
根据打分规则，运算顺序错误的学生也将得到 5 分（因为他们仍然得到了正确的结果），而不是 2 分。
所有学生得分分别为：[0,0,5,0,0,5] 。所有得分之和为 10 分。
 

提示：

3 <= s.length <= 31
s 表示一个只包含 0-9 ，'+' 和 '*' 的合法表达式。
表达式中所有整数运算数字都在闭区间 [0, 9] 以内。
1 <= 数学表达式中所有运算符数目（'+' 和 '*'） <= 15
测试数据保证正确表达式结果在范围 [0, 1000] 以内。
n == answers.length
1 <= n <= 104
0 <= answers[i] <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/the-score-of-students-solving-math-expression
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <iostream>
#include <stack>
#include <unordered_set>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    int scoreOfStudents(string s, vector<int>& answers) {
        int score = 0, size = (s.size() + 1) / 2;
        int rightAnswer = getRightAnswer(s);

        vector<vector<unordered_set<int>>> possibleAnswers(size, vector<unordered_set<int>>(size));
        getPossibleAnswers(s, possibleAnswers, size);

        for (int answer : answers) {
            if (answer == rightAnswer) {
                score += 5;
            }
            else if (possibleAnswers[0][size - 1].count(answer) != 0) {
                score += 2;
            }
        }

        return score;
    }

    int getRightAnswer(string& s) {
        stack<int> nums;
        int ans = 0;

        for (char c : s) {
            if (c == '+') {
                continue;
            }

            if (c == '*') {
                nums.push(-1);
            }
            else {
                if (!nums.empty() && nums.top() == -1) {
                    nums.pop();
                    int num = nums.top();
                    nums.pop();
                    nums.push(num * (c - '0'));
                }
                else {
                    nums.push(c - '0');
                }
            }
        }

        while (!nums.empty()) {
            ans += nums.top();
            nums.pop();
        }

        return ans;
    }

    void getPossibleAnswers(string& s, vector<vector<unordered_set<int>>>& possibleAnswers, int size) {
        int i, j, k;

        for (i = 0; i < size; ++i) {
            possibleAnswers[i][i] = { s[i * 2] - '0' };
        }

        i = 0, j = 1;

        while (j < size) {
            for (k = i; k < j; ++k) {
                for (int ans1 : possibleAnswers[i][k]) {
                    for (int ans2 : possibleAnswers[k + 1][j]) {
                        int ans = (s[2 * k + 1] == '+' ? ans1 + ans2 : ans1 * ans2);
                        if (ans <= 1000) {
                            possibleAnswers[i][j].insert(ans);
                        }
                    }
                }
            }

            ++i, ++j;
            if (j == size) {
                j = size + 1 - i, i = 0;
            }
        }
    }
};

int main()
{
    CheckResult check;
    Solution o;

    vector<int> answers = { 20,13,42 };
    check.checkInt(7, o.scoreOfStudents("7+3*1*2", answers));
    
    answers = { 13,0,10,13,13,16,16 };
    check.checkInt(19, o.scoreOfStudents("3+5*2", answers));

    answers = { 12,9,6,4,8,6 };
    check.checkInt(10, o.scoreOfStudents("6+0*1", answers));

    answers = { 262,614,973,845,467,805,291,654,821,931,995,803,437,644,708,501,449,321,831,895,565,452,757,340,517,581,568,935,361,947,616,983,473,881,650,715,571,635,763,994,628,293,979,851,847,975,911,891,893,470,619,624,991,289,560,927,799,548,899,469,382,476,653,589,981,754,985,626,477,779,811,939,875,828,667,968,960,266,424,601,841,426,655,703,761,773,562,921,597,262,741,555,406,561,504,681,774,749,563,414,621,980,286,958,427,829,491,385,530,670,493,615,450,557,313,943,459,797,330,294,629,416,593,631,990,515,494,521,393,701,659,755,997,436,613,677,623,982,789,451,409,672,337,546,495,817,418,448,753,992,298,328,633,525,453,591,549,322,657,551,386,721,937,471,793,373,909,550,877,577,442,649,969,610,527,490,392,697,462,611,970,850,949,922,505,682,967,955,455,777,460,765,430,566,925,350,685,855,660,325,989,630,962,365,879,680,503,825,431,694,389,534,497,625,524,317,397,463,977,618,705,535,498,663,759,822,492,669,334,603,454,564,915,731,910,384,689,792,647,711,489,819,934,575,729,661,484,814,596,867,683,641,599,707,771,636,987,843,804,924,903,951,887,784,767,587,878,725,780,747,791,840,612,963,999,699,837,795,859,884,723,713,529,756,421,684,349,809,487,652,445,509,553,984,617,833,377,904,537,468,798,645,401,861,870,717,582,853,627,408,585,693,513,668,511,532,739,559,604,691,583,932,651,812,839,940,948,688,775,595,733,848,883,993,634,602,961,901,941,957,541,857,846,978,900,605,428,923,264,288,801,479,726,363,823,764,429,387,323,678,315,945,637,332,296,673,496,523,395,461,824,679,813,475,411,482,519,339,552,579,972,852,849,783,272,371,299,885,331,540,567,953,639,304,1000,531,403,692,719,815,743,897,908,547,398,518,425,917,896,920,971,863,929,665,818,938,869,740,836,944,918,686,933,966,873,865,355,379,356,533,695,588,675,835,383,543,407,342,648,441,369,507,465,573,709,687,807,768,860,998,735,954,834,942,930,976 };
    check.checkInt(918, o.scoreOfStudents("1+2*3+4+5*6*7+8+9+1*2*3*4+0*5*6", answers));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
