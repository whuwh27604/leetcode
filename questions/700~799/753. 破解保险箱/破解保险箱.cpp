/* 破解保险箱.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
有一个需要密码才能打开的保险箱。密码是 n 位数, 密码的每一位是 k 位序列 0, 1, ..., k-1 中的一个 。

你可以随意输入密码，保险箱会自动记住最后 n 位输入，如果匹配，则能够打开保险箱。

举个例子，假设密码是 "345"，你可以输入 "012345" 来打开它，只是你输入了 6 个字符.

请返回一个能打开保险箱的最短字符串。

 

示例1:

输入: n = 1, k = 2
输出: "01"
说明: "10"也可以打开保险箱。
 

示例2:

输入: n = 2, k = 2
输出: "00110"
说明: "01100", "10011", "11001" 也能打开保险箱。
 

提示：

n 的范围是 [1, 4]。
k 的范围是 [1, 10]。
k^n 最大可能为 4096。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/cracking-the-safe
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <iostream>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    string crackSafe(int n, int k) {
        string allPasswords;
        int base = (int)pow(10, n - 1);
        vector<bool> visited(base * 10, false);

        DFS(0, k, base, visited, allPasswords);
        allPasswords += string(n - 1, '0');

        return allPasswords;
    }

    void DFS(int num, int k, int base, vector<bool>& visited, string& allPasswords) {
        for (int i = 0; i < k; ++i) {
            int next = (num * 10 + i);
            if (!visited[next]) {
                visited[next] = true;
                DFS(next % base, k, base, visited, allPasswords);
                allPasswords += (char)('0' + i);
            }
        }
    }
};

int main()
{
    CheckResult check;
    Solution o;

    check.checkString("0", o.crackSafe(1, 1));
    check.checkString("10", o.crackSafe(1, 2));
    check.checkString("43210", o.crackSafe(1, 5));
    check.checkString("01100", o.crackSafe(2, 2));
    check.checkString("0077767666775675765665755655577467457476466456475465455474464454447736735734737636635634637536535534537436435434437336335334333772672572472372762662562462362752652552452352742642542442342732632532432332722622522422322277167157147137127176166156146136126175165155145135125174164154144134124173163153143133123172162152142132122171161151141131121117706705704703702701707606605604603602601607506505504503502501507406405404403402401407306305304303302301307206205204203202201207106105104103102101107006005004003002001000", o.crackSafe(3, 8));
    check.checkString("0003333232332232222333123313231223131332123213221222131212133112311321122113111211113330233013303230223012303130213011303033202320132032202220122031202120112030202033102310131032102210121031102110111030102010103300230013003200220012003100210011003000200010000", o.crackSafe(4, 4));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
