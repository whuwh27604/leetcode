/* 得到更多分数的最少关卡数目.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
给你一个长度为 n 的二进制数组 possible 。

莉叩酱和冬坂五百里正在玩一个有 n 个关卡的游戏，游戏中有一些关卡是 困难 模式，其他的关卡是 简单 模式。如果 possible[i] == 0 ，那么第 i 个关卡是 困难 模式。一个玩家通过一个简单模式的关卡可以获得 1 分，通过困难模式的关卡将失去 1 分。

游戏的一开始，莉叩酱将从第 0 级开始 按顺序 完成一些关卡，然后冬坂五百里会完成剩下的所有关卡。

假设两名玩家都采取最优策略，目的是 最大化 自己的得分，莉叩酱想知道自己 最少 需要完成多少个关卡，才能获得比冬坂五百里更多的分数。

请你返回莉叩酱获得比冬坂五百里更多的分数所需要完成的 最少 关卡数目，如果 无法 达成，那么返回 -1 。

注意，每个玩家都至少需要完成 1 个关卡。



示例 1：

输入：possible = [1,0,1,0]

输出：1

解释：

我们来看一下莉叩酱可以完成的关卡数目：

如果莉叩酱只完成关卡 0 ，冬坂五百里完成剩下的所有关卡，那么莉叩酱获得 1 分，冬坂五百里获得 -1 + 1 - 1 = -1 分。
如果莉叩酱完成到关卡 1 ，冬坂五百里完成剩下的所有关卡，那么莉叩酱获得 1 - 1 = 0 分，冬坂五百里获得 1 - 1 = 0 分。
如果莉叩酱完成到关卡 2 ，冬坂五百里完成剩下的所有关卡，那么莉叩酱获得 1 - 1 + 1 = 1 分，冬坂五百里获得 -1 分。
莉叩酱需要完成至少一个关卡获得更多的分数。

示例 2：

输入：possible = [1,1,1,1,1]

输出：3

解释：

我们来看一下莉叩酱可以完成的关卡数目：

如果莉叩酱只完成关卡 0 ，冬坂五百里完成剩下的所有关卡，那么莉叩酱获得 1 分，冬坂五百里获得 4 分。
如果莉叩酱完成到关卡 1 ，冬坂五百里完成剩下的所有关卡，那么莉叩酱获得 2 分，冬坂五百里获得 3 分。
如果莉叩酱完成到关卡 2 ，冬坂五百里完成剩下的所有关卡，那么莉叩酱获得 3 分，冬坂五百里获得 2 分。
如果莉叩酱完成到关卡 3 ，冬坂五百里完成剩下的所有关卡，那么莉叩酱获得 4 分，冬坂五百里获得 1 分。
莉叩酱需要完成至少三个关卡获得更多的分数。

示例 3：

输入：possible = [0,0]

输出：-1

解释：

两名玩家只能各完成 1 个关卡，莉叩酱完成关卡 0 得到 -1 分，冬坂五百里完成关卡 1 得到 -1 分。两名玩家得分相同，所以莉叩酱无法得到更多分数。



提示：

2 <= n == possible.length <= 105
possible[i] 要么是 0 要么是 1 。
*/

#include <iostream>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    int minimumLevels(vector<int>& possible) {
		int size = possible.size(), sum = 0;
		vector<int> sums(size + 1, 0);

		for (int i = 0; i < size; ++i) {
			sums[i + 1] = sums[i] + ((possible[i] == 0) ? -1 : 1);
		}

		for (int i = 1; i < size; ++i) {
			if (sums[i] > sums[size] - sums[i]) {
				return i;
			}
		}

		return -1;
    }
};

int main()
{
	Solution o;
	CheckResult check;

	vector<int> possible = { 1,0,1,0 };
	check.checkInt(1, o.minimumLevels(possible));

	possible = { 1,1,1,1,1 };
	check.checkInt(3, o.minimumLevels(possible));

	possible = { 0,0 };
	check.checkInt(-1, o.minimumLevels(possible));

	possible = { 0,1,1 };
	check.checkInt(-1, o.minimumLevels(possible));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
