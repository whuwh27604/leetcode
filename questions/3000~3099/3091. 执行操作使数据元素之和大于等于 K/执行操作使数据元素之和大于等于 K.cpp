/* 执行操作使数据元素之和大于等于 K.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
给你一个正整数 k 。最初，你有一个数组 nums = [1] 。

你可以对数组执行以下 任意 操作 任意 次数（可能为零）：

选择数组中的任何一个元素，然后将它的值 增加 1 。
复制数组中的任何一个元素，然后将它附加到数组的末尾。
返回使得最终数组元素之 和 大于或等于 k 所需的 最少 操作次数。



示例 1：

输入：k = 11

输出：5

解释：

可以对数组 nums = [1] 执行以下操作：

将元素的值增加 1 三次。结果数组为 nums = [4] 。
复制元素两次。结果数组为 nums = [4,4,4] 。
最终数组的和为 4 + 4 + 4 = 12 ，大于等于 k = 11 。
执行的总操作次数为 3 + 2 = 5 。

示例 2：

输入：k = 1

输出：0

解释：

原始数组的和已经大于等于 1 ，因此不需要执行操作。



提示：

1 <= k <= 105
*/

#include <iostream>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    int minOperations(int k) {
		/* 1、设当前是n，先执行加1，再执行cp，增加了1+n+1；先执行cp，再执行加1，增加了n+1。所以一定是先执行加1操作x次，然后再执行cp操作y次
		*  2、假设执行了x-1次加1操作变为x，则需要x + x * y >= k；y >= k / x - 1
		*  3、答案是求满足y + x - 1 >= k / x - 1 + x - 1 = k / x + x - 2的最小值 */
		return (int)ceil(sqrt(k) * 2 - 2);
    }
};

int main()
{
	Solution o;
	CheckResult check;

	check.checkInt(5, o.minOperations(11));
	check.checkInt(0, o.minOperations(1));
	check.checkInt(3, o.minOperations(5));
	check.checkInt(631, o.minOperations(100000));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
