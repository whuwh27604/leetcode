/* 可以被一步捕获的棋子数.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
在一个 8 x 8 的棋盘上，有一个白色的车（Rook），用字符 'R' 表示。棋盘上还可能存在空方块，白色的象（Bishop）以及黑色的卒（pawn），分别用字符 '.'，'B' 和 'p' 表示。不难看出，大写字符表示的是白棋，小写字符表示的是黑棋。

车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其一，然后一直向选定的方向移动，直到满足下列四个条件之一：

棋手选择主动停下来。
棋子因到达棋盘的边缘而停下。
棋子移动到某一方格来捕获位于该方格上敌方（黑色）的卒，停在该方格内。
车不能进入/越过已经放有其他友方棋子（白色的象）的方格，停在友方棋子前。
你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋子数）。

 

示例 1：



输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：3
解释：
在本例中，车能够捕获所有的卒。
示例 2：



输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：0
解释：
象阻止了车捕获任何卒。
示例 3：



输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：3
解释：
车可以捕获位置 b5，d6 和 f5 的卒。
 

提示：

board.length == board[i].length == 8
board[i][j] 可以是 'R'，'.'，'B' 或 'p'
只有一个格子上存在 board[i][j] == 'R'

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/available-captures-for-rook
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <iostream>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    int numRookCaptures(vector<vector<char>>& board) {
        vector<int> RookPosition = findRook(board);
        int count = 0, r = RookPosition[0], c = RookPosition[1];

        char piece;
        while ((piece = moveLeft(r, c, board)) == '.') {}
        if (piece == 'p') {
            count++;
        }

        r = RookPosition[0];
        c = RookPosition[1];
        while ((piece = moveRight(r, c, board)) == '.') {}
        if (piece == 'p') {
            count++;
        }

        r = RookPosition[0];
        c = RookPosition[1];
        while ((piece = moveUp(r, c, board)) == '.') {}
        if (piece == 'p') {
            count++;
        }

        r = RookPosition[0];
        c = RookPosition[1];
        while ((piece = moveDown(r, c, board)) == '.') {}
        if (piece == 'p') {
            count++;
        }

        return count;
    }

    vector<int> findRook(vector<vector<char>>& board) {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == 'R') {
                    return { i, j };
                }
            }
        }

        return {};
    }

    char moveLeft(int& r, int& c, vector<vector<char>>& board) {
        if (c == 7) {
            return 'B';
        }

        c++;
        return board[r][c];
    }

    char moveRight(int& r, int& c, vector<vector<char>>& board) {
        if (c == 0) {
            return 'B';
        }

        c--;
        return board[r][c];
    }

    char moveUp(int& r, int& c, vector<vector<char>>& board) {
        if (r == 0) {
            return 'B';
        }

        r--;
        return board[r][c];
    }

    char moveDown(int& r, int& c, vector<vector<char>>& board) {
        if (r == 7) {
            return 'B';
        }

        r++;
        return board[r][c];
    }
};

int main()
{
    Solution o;
    CheckResult check;

    vector<vector<char>> board = { {'.','.','.','.','.','.','.','.'},{'.','.','.','p','.','.','.','.'},{'.','.','.','R','.','.','.','p'},{'.','.','.','.','.','.','.','.'},{'.','.','.','.','.','.','.','.'},{'.','.','.','p','.','.','.','.'},{'.','.','.','.','.','.','.','.'},{'.','.','.','.','.','.','.','.'} };
    check.checkInt(3, o.numRookCaptures(board));

    board = { {'.','.','.','.','.','.','.','.'},{'.','p','p','p','p','p','.','.'},{'.','p','p','B','p','p','.','.'},{'.','p','B','R','B','p','.','.'},{'.','p','p','B','p','p','.','.'},{'.','p','p','p','p','p','.','.'},{'.','.','.','.','.','.','.','.'},{'.','.','.','.','.','.','.','.'} };
    check.checkInt(0, o.numRookCaptures(board));

    board = { {'.','.','.','.','.','.','.','.'},{'.','.','.','p','.','.','.','.'},{'.','.','.','p','.','.','.','.'},{'p','p','.','R','.','p','B','.'},{'.','.','.','.','.','.','.','.'},{'.','.','.','B','.','.','.','.'},{'.','.','.','p','.','.','.','.'},{'.','.','.','.','.','.','.','.'} };
    check.checkInt(3, o.numRookCaptures(board));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
