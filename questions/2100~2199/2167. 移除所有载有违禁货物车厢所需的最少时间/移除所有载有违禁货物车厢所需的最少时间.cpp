/* 移除所有载有违禁货物车厢所需的最少时间.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
给你一个下标从 0 开始的二进制字符串 s ，表示一个列车车厢序列。s[i] = '0' 表示第 i 节车厢 不 含违禁货物，而 s[i] = '1' 表示第 i 节车厢含违禁货物。

作为列车长，你需要清理掉所有载有违禁货物的车厢。你可以不限次数执行下述三种操作中的任意一个：

从列车 左 端移除一节车厢（即移除 s[0]），用去 1 单位时间。
从列车 右 端移除一节车厢（即移除 s[s.length - 1]），用去 1 单位时间。
从列车车厢序列的 任意位置 移除一节车厢，用去 2 单位时间。
返回移除所有载有违禁货物车厢所需要的 最少 单位时间数。

注意，空的列车车厢序列视为没有车厢含违禁货物。

 

示例 1：

输入：s = "1100101"
输出：5
解释：
一种从序列中移除所有载有违禁货物的车厢的方法是：
- 从左端移除一节车厢 2 次。所用时间是 2 * 1 = 2 。
- 从右端移除一节车厢 1 次。所用时间是 1 。
- 移除序列中间位置载有违禁货物的车厢。所用时间是 2 。
总时间是 2 + 1 + 2 = 5 。

一种替代方法是：
- 从左端移除一节车厢 2 次。所用时间是 2 * 1 = 2 。
- 从右端移除一节车厢 3 次。所用时间是 3 * 1 = 3 。
总时间也是 2 + 3 = 5 。

5 是移除所有载有违禁货物的车厢所需要的最少单位时间数。
没有其他方法能够用更少的时间移除这些车厢。
示例 2：

输入：s = "0010"
输出：2
解释：
一种从序列中移除所有载有违禁货物的车厢的方法是：
- 从左端移除一节车厢 3 次。所用时间是 3 * 1 = 3 。
总时间是 3.

另一种从序列中移除所有载有违禁货物的车厢的方法是：
- 移除序列中间位置载有违禁货物的车厢。所用时间是 2 。
总时间是 2.

另一种从序列中移除所有载有违禁货物的车厢的方法是：
- 从右端移除一节车厢 2 次。所用时间是 2 * 1 = 2 。
总时间是 2.

2 是移除所有载有违禁货物的车厢所需要的最少单位时间数。
没有其他方法能够用更少的时间移除这些车厢。
 

提示：

1 <= s.length <= 2 * 105
s[i] 为 '0' 或 '1'

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-time-to-remove-all-cars-containing-illegal-goods
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <iostream>
#include <algorithm>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    int minimumTime(string s) {
        int i, size = s.size();
        int dp0 = 0, dp1 = 0, dp2 = 0;  // dp0表示删除左侧的状态，dp1表示删除中间的状态，dp2表示删除右侧的状态

        for (i = 0; i < size; ++i) {
            int next0 = dp0 + 1;  // next0只能从dp0转移，即删除左侧所有
            int next1 = min(dp0, dp1) + (s[i] == '1' ? 2 : 0);  // next1可以从dp0或者dp1转移，当前车厢选择删除中间，代价为2
            int next2 = min({ dp0, dp1, dp2 }) + 1;  // next2可以从dp0或者dp1或者dp2转移
            dp0 = next0;
            dp1 = next1;
            dp2 = next2;
        }

        return min({ dp0, dp1,dp2 });
    }
};

int main()
{
    CheckResult check;
    Solution o;

    check.checkInt(5, o.minimumTime("1100101"));
    check.checkInt(2, o.minimumTime("0010"));
    check.checkInt(0, o.minimumTime("0"));
    check.checkInt(1, o.minimumTime("1"));
    check.checkInt(17, o.minimumTime("011100001111111100001"));
    check.checkInt(121, o.minimumTime("011100001111111100001011100001111111100001011100001111111100001011100001111111100001011100001111111100001011100001111111100001"));
    check.checkInt(425, o.minimumTime("010010001000011011011101111010101001001001000100001101101110111101010100100100100010000110110111011110101010010010010001000011011011101111010101001001001000100001101101110111101010100100100100010000110110111011110101010010010010001000011011011101111010101001001001000100001101101110111101010100100100100010000110110111011110101010010010010001000011011011101111010101001001001000100001101101110111101010100100100100010000110110111011110101010010"));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
