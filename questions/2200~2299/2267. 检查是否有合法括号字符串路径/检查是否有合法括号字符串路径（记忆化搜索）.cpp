/* 检查是否有合法括号字符串路径.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
一个括号字符串是一个 非空 且只包含 '(' 和 ')' 的字符串。如果下面 任意 条件为 真 ，那么这个括号字符串就是 合法的 。

字符串是 () 。
字符串可以表示为 AB（A 连接 B），A 和 B 都是合法括号序列。
字符串可以表示为 (A) ，其中 A 是合法括号序列。
给你一个 m x n 的括号网格图矩阵 grid 。网格图中一个 合法括号路径 是满足以下所有条件的一条路径：

路径开始于左上角格子 (0, 0) 。
路径结束于右下角格子 (m - 1, n - 1) 。
路径每次只会向 下 或者向 右 移动。
路径经过的格子组成的括号字符串是 合法 的。
如果网格图中存在一条 合法括号路径 ，请返回 true ，否则返回 false 。

 

示例 1：



输入：grid = [["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]]
输出：true
解释：上图展示了两条路径，它们都是合法括号字符串路径。
第一条路径得到的合法字符串是 "()(())" 。
第二条路径得到的合法字符串是 "((()))" 。
注意可能有其他的合法括号字符串路径。
示例 2：



输入：grid = [[")",")"],["(","("]]
输出：false
解释：两条可行路径分别得到 "))(" 和 ")((" 。由于它们都不是合法括号字符串，我们返回 false 。
 

提示：

m == grid.length
n == grid[i].length
1 <= m, n <= 100
grid[i][j] 要么是 '(' ，要么是 ')' 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/check-if-there-is-a-valid-parentheses-string-path
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

#include <iostream>
#include <unordered_set>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    bool hasValidPath(vector<vector<char>>& grid) {
        int m = grid.size(), n = grid[0].size();

        if (((m + n) % 2 == 0) || grid[0][0] == ')' || grid[m - 1][n - 1] == '(') {
            return false;
        }

        vector<vector<vector<bool>>> visited(m, vector<vector<bool>>(n, vector<bool>(m + n, 0)));

        return DFS(grid, 0, 0, 0, m, n, visited);
    }

    bool DFS(vector<vector<char>>& grid, int r, int c, int count, int m, int n, vector<vector<vector<bool>>>& visited) {
        count += (grid[r][c] == '(' ? 1 : -1);
        if (count < 0) {  // 没有左括号的情况下出现了右括号
            return false;
        }

        if (r == m - 1 && c == n - 1) {  // 到达终点，判断括号是否闭合
            return count == 0;
        }

        if (visited[r][c][count]) {  // 该状态已经访问过，不能成功
            return false;
        }

        visited[r][c][count] = true;

        if (m - r + n - c - 2 < count) {  // 剩余全部是右括号都不够了
            return false;
        }

        if (r != m - 1 && DFS(grid, r + 1, c, count, m, n, visited)) {
            return true;
        }

        if (c != n - 1 && DFS(grid, r, c + 1, count, m, n, visited)) {
            return true;
        }

        return false;
    }
};

int main()
{
    CheckResult check;
    Solution o;

    vector<vector<char>> grid = { {'(','(','('},{')','(',')'},{'(','(',')'},{'(','(',')'} };
    check.checkBool(true, o.hasValidPath(grid));
    
    grid = { {'(','(','(','(','(',')',')','(',')',')','(',')',')','(',')','(','(',')',')','(',')','(',')',')','(',')',')',')',')','(',')','(','('},{'(',')',')','(','(',')',')',')',')','(',')','(',')','(',')','(','(',')',')','(','(','(','(',')',')',')',')',')','(','(',')','(','('},{')',')','(','(',')',')',')',')','(',')','(',')',')',')','(','(',')','(',')','(','(','(',')',')',')',')',')',')',')',')',')','(','('},{'(','(','(',')','(',')',')',')','(',')','(','(','(',')','(',')','(',')','(',')','(',')','(',')',')',')','(','(',')','(',')',')',')'},{')','(',')','(',')',')',')',')','(','(','(','(',')','(',')','(','(','(','(','(',')','(','(',')',')','(','(','(',')','(',')',')','('},{')',')',')','(',')',')',')','(','(',')',')','(','(','(','(',')','(','(',')',')','(',')',')',')','(',')',')','(',')',')','(','(','('},{')','(',')','(','(',')',')','(',')',')',')','(','(','(',')','(','(','(',')','(',')','(',')',')',')',')',')','(',')',')','(','(',')'},{'(','(',')',')','(',')',')','(','(','(','(',')','(',')','(','(','(','(','(','(',')','(',')','(',')',')','(','(','(',')','(','(',')'},{')',')','(','(',')',')','(','(','(','(','(','(','(',')',')','(','(','(',')',')','(',')','(','(',')',')','(',')',')','(',')','(','('},{')',')',')',')','(',')',')','(','(','(','(',')',')',')','(',')',')',')',')',')',')','(','(','(','(',')',')',')',')','(','(','(',')'} };
    check.checkBool(true, o.hasValidPath(grid));

    grid = { {')',')'},{'(','('} };
    check.checkBool(false, o.hasValidPath(grid));

    grid = { {'(','('} };
    check.checkBool(false, o.hasValidPath(grid));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
