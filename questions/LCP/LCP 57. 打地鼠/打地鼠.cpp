/* 打地鼠.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
欢迎各位勇者来到力扣城，本次试炼主题为「打地鼠」。middle_img_v2_d5d09656-0616-4a80-845e-ece461c5ba9g.png勇者面前有一个大小为3*3 的打地鼠游戏机，地鼠将随机出现在各个位置，moles[i] = [t,x,y] 表示在第 t 秒会有地鼠出现在 (x,y) 位置上，并于第 t+1 秒该地鼠消失。

勇者有一把可敲打地鼠的锤子，初始时刻（即第 0 秒）锤子位于正中间的格子 (1,1)，锤子的使用规则如下：

锤子每经过 1 秒可以往上、下、左、右中的一个方向移动一格，也可以不移动
锤子只可敲击所在格子的地鼠，敲击不耗时
请返回勇者最多能够敲击多少只地鼠。

注意：

输入用例保证在相同时间相同位置最多仅有一只地鼠
示例 1：

输入： moles = [[1,1,0],[2,0,1],[4,2,2]]

输出： 2

解释： 第 0 秒，锤子位于 (1,1) 第 1 秒，锤子移动至 (1,0) 并敲击地鼠 第 2 秒，锤子移动至 (2,0) 第 3 秒，锤子移动至 (2,1) 第 4 秒，锤子移动至 (2,2) 并敲击地鼠 因此勇者最多可敲击 2 只地鼠

示例 2：

输入：moles = [[2,0,2],[5,2,0],[4,1,0],[1,2,1],[3,0,2]]

输出：3

解释： 第 0 秒，锤子位于 (1,1) 第 1 秒，锤子移动至 (2,1) 并敲击地鼠 第 2 秒，锤子移动至 (1,1) 第 3 秒，锤子移动至 (1,0) 第 4 秒，锤子在 (1,0) 不移动并敲击地鼠 第 5 秒，锤子移动至 (2,0) 并敲击地鼠 因此勇者最多可敲击 3 只地鼠

示例 3：

输入：moles = [[0,1,0],[0,0,1]]

输出：0

解释： 第 0 秒，锤子初始位于 (1,1)，此时并不能敲击 (1,0)、(0,1) 位置处的地鼠

提示：

1 <= moles.length <= 10^5
moles[i].length == 3
0 <= moles[i][0] <= 10^9
0 <= moles[i][1], moles[i][2] < 3
*/

#include <iostream>
#include <algorithm>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
	int getMaximumNumber(vector<vector<int>>& moles) {
		sort(moles.begin(), moles.end());
		adjustTime(moles);

		vector<vector<int>> dp(3, vector<int>(3, 0)), prev(3, vector<int>(3, 0));  // dp[t][x][y]表示在时刻t，锤子落在[x,y]的最大moles
		int size = (int)moles.size(), idx = 0, lastTime = moles.back()[0];

		for (int time = 0; time <= lastTime; ++time) {
			int grid[3][3] = { 0 };
			while (idx < size && moles[idx][0] == time) {
				grid[moles[idx][1]][moles[idx][2]] = 1;  // 这一秒有哪些单元格有moles
				++idx;
			}

			if (time > 1) {  // 每个单元格从上一秒的相邻单元格转移来
				dp[0][0] = max({ prev[0][0],prev[0][1],prev[1][0] }) + grid[0][0];
				dp[0][1] = max({ prev[0][1],prev[0][0],prev[0][2],prev[1][1]}) + grid[0][1];
				dp[0][2] = max({ prev[0][2],prev[0][1],prev[1][2] }) + grid[0][2];
				dp[1][0] = max({ prev[1][0],prev[0][0],prev[2][0],prev[1][1] }) + grid[1][0];
				dp[1][1] = max({ prev[1][1],prev[0][1],prev[1][0],prev[1][2],prev[2][1] }) + grid[1][1];
				dp[1][2] = max({ prev[1][2],prev[0][2],prev[2][2],prev[1][1] }) + grid[1][2];
				dp[2][0] = max({ prev[2][0],prev[1][0],prev[2][1] }) + grid[2][0];
				dp[2][1] = max({ prev[2][1],prev[2][0],prev[2][2],prev[1][1] }) + grid[2][1];
				dp[2][2] = max({ prev[2][2],prev[1][2],prev[2][1] }) + grid[2][2];
			}
			else if (time == 1) {  // 第一秒的时候只有这5个单元格可以走到
				dp[1][1] = prev[1][1] + grid[1][1];
				dp[0][1] = prev[1][1] + grid[0][1];
				dp[1][0] = prev[1][1] + grid[1][0];
				dp[1][2] = prev[1][1] + grid[1][2];
				dp[2][1] = prev[1][1] + grid[2][1];
			}
			else {  // time == 0
				dp[1][1] = grid[1][1];
			}

			prev = dp;
		}

		int ans = 0;
		for (auto& v1 : dp) {
			for (int v2 : v1) {
				ans = max(ans, v2);
			}
		}

		return ans;
	}

	void adjustTime(vector<vector<int>>& moles) {
		int size = (int)moles.size(), diff = 0;
		vector<int> diffs(size, 0);

		if (moles[0][0] > 4) {
			diffs[0] = moles[0][0] - 4;
		}

		for (int i = 1; i < size; ++i) {
			if (moles[i][0] - moles[i - 1][0] > 4) {
				diffs[i] = moles[i][0] - moles[i - 1][0] - 4;
			}
		}

		for (int i = 0; i < size; ++i) {
			diff += diffs[i];
			moles[i][0] -= diff;
		}
	}
};

int main()
{
	Solution o;
	CheckResult check;

	vector<vector<int>> moles = { {1,1,0},{2,0,1},{4,2,2} };
	check.checkInt(2, o.getMaximumNumber(moles));

	moles = { {2,0,2},{5,2,0},{4,1,0},{1,2,1},{3,0,2} };
	check.checkInt(3, o.getMaximumNumber(moles));

	moles = { {0,1,0},{0,0,1} };
	check.checkInt(0, o.getMaximumNumber(moles));

	moles = { {8871,2,0},{8867,2,0},{8893,2,1},{8872,1,1} };
	check.checkInt(3, o.getMaximumNumber(moles));

	moles = { {4,2,1},{1,1,2},{2,1,0},{3,2,1},{4,0,0},{0,1,1} };
	check.checkInt(4, o.getMaximumNumber(moles));

	moles = { {0,1,0},{0,0,1},{0,2,1},{0,1,2},{0,0,2},{1,2,2},{1,0,0},{1,0,2},{2,0,2},{2,2,2},{2,0,1},{2,0,0},{2,2,0},{3,1,2},{3,0,0},{3,2,0},{3,0,2},{3,2,2},{3,1,0},{4,0,1},{4,1,2},{4,1,1},{4,0,2},{4,1,0},{5,0,1},{5,0,0},{5,2,0},{5,0,2},{6,1,2},{6,0,0},{6,0,2},{6,1,0},{6,2,1},{7,0,0},{7,2,0},{7,1,1},{7,1,2},{7,2,1},{8,2,2},{8,0,1},{8,2,1},{8,1,2},{8,1,1},{8,2,0},{9,1,1},{9,0,2},{9,2,2},{9,1,0},{9,2,1},{9,0,0},{9,2,0},{10,1,1},{10,0,2},{10,1,0},{10,2,2},{10,2,1},{10,1,2},{10,0,0} };
	check.checkInt(9, o.getMaximumNumber(moles));

	moles = { {7412,2,2},{7409,2,2},{7432,2,1},{8897,1,2},{8916,2,1},{8871,2,0},{8867,2,0},{8907,1,0},{8875,2,2},{8891,1,2},{8917,2,1},{8914,2,0},{8891,2,2},{8893,2,1},{8872,1,1},{8903,1,1},{8874,0,2},{8877,2,2},{8872,2,1},{8914,1,2},{8892,1,0},{8888,0,2},{8913,0,0},{8908,1,2},{8881,1,1},{8869,2,0},{8890,1,1},{8918,2,1},{8908,2,2},{8898,0,0},{8906,1,2},{8886,1,2},{8911,1,1},{8917,2,0},{8888,1,0},{8905,2,0},{8903,2,0},{8879,2,1},{8890,2,0},{8876,2,0},{8890,1,0},{8910,2,2},{8883,0,2},{8909,0,2},{8902,0,0},{8881,0,0},{8905,0,1},{8911,0,2},{8868,0,1},{8904,2,1},{8892,2,0},{8869,0,1},{8889,0,0},{8900,1,2},{8891,0,1},{8912,2,0},{8899,1,2},{8871,0,0},{8904,2,0},{8870,2,2},{8872,0,1},{8868,0,0},{8899,2,0},{8886,0,0},{8875,2,1},{8875,0,0},{8891,0,0},{8882,0,1},{8880,1,2},{8897,1,0},{8869,1,2},{8874,2,1},{8888,0,0},{8883,1,2},{8899,0,0},{8894,2,2},{8901,0,0},{8896,1,1},{8891,1,1},{8889,0,1},{8915,2,2},{8873,1,1},{8877,2,1},{8910,2,1},{8881,2,2},{8889,1,2},{8901,2,1},{8880,1,1},{8913,1,0},{8896,0,2},{8877,1,1},{8876,0,1},{8905,0,0},{8882,2,2},{8893,2,2},{8902,1,0},{8899,0,2},{8869,1,0},{8882,0,0},{8883,0,1},{8874,1,2},{8902,2,1},{8895,0,2},{8892,0,1},{8918,1,2},{8913,0,2},{8905,0,2},{8878,1,1},{8878,2,0},{8884,0,1},{8915,2,0},{8877,1,0},{8881,1,2},{8910,1,2},{8904,1,1},{8911,2,0},{8895,2,1},{8905,1,2},{8887,2,1},{8887,1,1},{8880,0,0},{8894,0,1},{8885,1,1},{8872,0,0},{8870,0,1},{8905,2,2},{8905,2,1},{8873,1,2},{8892,1,2},{8877,0,0},{8912,1,2},{8880,2,2},{8886,2,0},{8900,0,2},{8907,0,1},{8915,0,0},{8878,2,1},{8874,1,0},{8883,2,0},{8885,1,2},{8907,2,1},{8898,0,2},{8899,2,2},{8883,1,0},{8908,0,0},{8905,1,1},{8910,0,0},{8890,2,1},{8916,0,1},{8867,1,2},{8908,0,2} };
	check.checkInt(52, o.getMaximumNumber(moles));

	moles = { {1917,0,1},{1910,0,2},{1946,2,1},{1978,0,0},{1932,2,0},{1979,0,1},{1975,1,2},{1939,2,0},{1988,0,1},{1950,2,2},{1999,0,0},{1938,1,2},{1987,0,0},{1967,2,0},{1996,1,2},{2004,0,1},{1997,1,2},{1980,1,1},{1910,2,0},{2002,2,0},{1980,1,2},{1995,0,1},{1913,1,2},{1976,2,0},{1979,1,2},{1928,2,0},{1991,1,1},{1978,2,1},{1946,1,1},{1917,1,2},{1025,0,1},{1030,0,0},{9538,0,2},{3259,0,0},{3246,0,1},{3304,1,2},{3274,1,0},{3316,0,0},{3296,0,0},{3312,2,2},{3258,0,2},{3341,1,0},{3308,1,2},{3325,2,2},{3251,1,0},{3332,2,0},{3249,1,0},{3283,1,2},{3256,0,1},{3284,2,2},{3305,2,2},{3253,2,2},{3280,1,1},{3326,2,1},{3340,0,0},{3279,2,0},{3245,2,0},{3277,0,2},{3329,0,1},{3288,1,0},{3310,1,0},{3270,2,2},{3246,0,2},{3245,0,0},{3296,0,1},{3321,2,1},{3310,2,1},{3264,2,2},{3282,0,1},{3286,0,1},{3275,0,1},{3266,1,2},{3323,1,0},{3255,2,0},{3335,0,1},{3318,1,0},{3290,1,2},{3341,0,1},{3334,2,0},{3264,2,1},{3280,2,0},{3306,2,0},{3288,2,1},{3289,0,1},{3330,2,2},{3268,0,0},{3299,0,1},{3300,2,0},{3335,2,0},{3253,2,1},{3268,2,2},{3276,2,2},{3264,1,2},{3341,0,2},{3265,1,1},{3275,1,2},{3335,1,1},{3251,2,2},{3316,1,2},{3312,2,0},{3264,0,2},{6064,1,1},{6109,0,0},{6104,2,0},{6048,0,0},{6124,2,1},{6096,2,0},{6110,2,1},{6104,0,0},{6059,1,2},{6050,2,0},{6117,1,1},{6088,2,2},{6072,2,2},{6073,1,2},{6074,0,1},{6046,2,2},{6077,1,2},{6099,1,2},{6125,2,1},{6074,2,1},{1190,2,0},{1110,0,2},{1097,2,0},{1159,2,2},{1144,2,0},{1143,1,1},{1113,1,1},{1139,0,1},{1165,0,2},{1185,0,1},{1112,2,2},{1167,1,0},{1125,0,2},{1099,0,1},{1165,1,1},{1190,1,2},{1151,2,0},{1170,2,1},{1106,1,2},{1142,2,2},{1137,0,0},{1134,2,0},{1121,1,1},{1151,1,0},{1168,0,1},{1179,1,2},{1122,1,0},{1180,2,2},{1142,0,2},{1186,1,1},{1122,2,0},{1163,2,1},{1174,0,1},{1127,2,0},{1189,0,2},{1184,1,0},{1107,0,2},{1120,1,1},{1172,0,2},{1098,1,0},{1160,0,0},{1116,2,1},{1163,0,0},{1135,0,0},{1183,2,2},{1175,0,1},{1117,1,2},{1117,1,0},{1117,1,1},{1169,2,0},{1173,0,1},{1130,0,1},{1130,1,1},{1187,2,2},{1144,1,0},{1172,2,1},{1171,1,2},{1108,0,2},{1101,0,0},{1107,2,0},{1122,2,2},{301,1,1},{329,0,0},{269,1,1},{277,1,0},{310,2,1},{251,1,0},{267,2,2},{265,2,2},{254,2,0},{330,0,2},{300,2,1},{294,0,0},{288,0,1},{305,1,2},{339,2,2},{339,1,1},{330,1,1},{335,0,1},{284,2,0},{283,2,2},{261,0,1},{266,1,1},{274,1,1},{256,1,0},{252,2,2},{285,1,0},{4515,1,1},{4511,0,2},{4568,0,0},{4497,2,0},{4583,2,0},{4540,2,2},{4548,2,0},{4558,2,2},{4530,1,0},{4501,1,1},{4519,1,2},{4513,2,1},{4571,2,0},{4577,1,0},{4512,1,0},{4535,2,1},{4581,2,2},{4563,0,0},{4530,1,1},{4567,2,2},{4498,2,1},{4587,2,0},{4505,0,0},{4516,0,0},{4510,2,2},{4536,1,2},{4507,0,1},{4568,2,1},{4514,1,1},{4576,1,0},{4592,1,2},{4545,0,1},{4533,2,1},{4567,1,2},{4556,2,1},{5319,0,1},{5351,2,1},{5343,2,2},{5334,1,0},{5356,1,0},{5345,0,1},{5292,2,0},{5380,2,1},{5355,0,1},{5307,0,1},{5357,2,2},{5383,2,1},{5320,0,2},{5341,0,0},{5312,1,0},{5326,2,0},{5298,0,2},{5325,1,0},{5318,1,2},{5295,1,1},{5301,0,0},{5321,2,2},{5332,1,2},{5384,1,2},{5328,1,2},{5339,1,1},{5358,2,0},{5347,0,2},{5292,1,1},{5355,1,0},{5385,0,0},{5319,2,1},{5331,2,0},{5383,1,1},{5347,1,0},{5317,2,2},{5337,1,1},{5366,0,0},{5384,2,2},{5293,1,2},{5332,2,0},{5299,2,0},{5358,0,1},{5320,2,1},{5298,0,1},{5377,0,1},{5326,1,2},{5355,2,0},{5347,0,1},{5336,2,1},{5309,2,0},{5368,0,0},{5291,1,0},{5330,2,2},{5333,1,1},{5313,1,0},{5367,0,0},{5317,1,1},{5355,1,2},{5345,0,2},{5357,0,0},{5382,2,0},{5307,0,2},{5320,1,1},{5338,2,1},{5369,0,0},{5363,1,2},{5303,2,0} };
	check.checkInt(201, o.getMaximumNumber(moles));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
