/* 古董键盘.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
小扣在秋日市集购买了一个古董键盘。由于古董键盘年久失修，键盘上只有 26 个字母 a~z 可以按下，且每个字母最多仅能被按 k 次。

小扣随机按了 n 次按键，请返回小扣总共有可能按出多少种内容。由于数字较大，最终答案需要对 1000000007 (1e9 + 7) 取模。

示例 1：

输入：k = 1, n = 1

输出：26

解释：由于只能按一次按键，所有可能的字符串为 "a", "b", ... "z"

示例 2：

输入：k = 1, n = 2

输出：650

解释：由于只能按两次按键，且每个键最多只能按一次，所有可能的字符串（按字典序排序）为 "ab", "ac", ... "zy"

提示：

1 <= k <= 5
1 <= n <= 26*k
*/

#include <iostream>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
	int keyboard(int k, int n) {
		int ans = 0;
		vector<vector<int>> combs(n + 1, vector<int>(k + 1, 0));
		vector<vector<int>> dp(26 + 1, vector<int>(n + 1, 0));  // dp[type][len]表示用前type种字符，组成len长的字符串的方法数
		dp[0][0] = 1;

		combination(k, n, combs);

		// dp[type][len] = sum(dp[type - 1][len - cnt] * combs[len][cnt]), cnt ∈ [0, k]
		for (int type = 1; type <= 26; ++type) {
			for (int len = 1; len <= n; ++len) {
				for (int cnt = 0; cnt <= k && cnt <= len; ++cnt) {
					dp[type][len] = (dp[type][len] + (long long)dp[type - 1][len - cnt] * combs[len][cnt]) % mod;
				}
			}
		}

		for (int type = 1; type <= 26; ++type) {
			ans = (ans + dp[type][n]) % mod;
		}

		return ans;
	}

	void combination(int k, int n, vector<vector<int>>& combs) {
		combs[0][0] = 1;

		for (int i = 1; i <= n; ++i) {
			combs[i][0] = 1;

			for (int j = 1; j <= k && j <= i; ++j) {
				combs[i][j] = (combs[i - 1][j] + combs[i - 1][j - 1]) % mod;
			}
		}
	}

	int mod = 1000000007;
};

int main()
{
	Solution o;
	CheckResult check;

	vector<vector<int>> expected = { {1,26,650,15600,358800,7893600,165765600,315311979,990927566,836696069,223833075,581329179,719937629,79126736,28647561,343770732,781478031,814780261,333022300,664178386,649248674,895492023,477460087,909840341,729521009,459042011,459042011},{1,26,676,17550,454350,11715600,300549600,662891551,983424649,22121903,94151488,262632911,688487218,246516640,211391726,835742949,439813866,778049807,585490272,769609638,500623964,974922532,84263353,785634500,427760068,256324218,972346975,969799895,323985950,781988984,401142878,181626092,881589993,736826569,766909712,859702474,839235383,676601436,971055892,178737289,774671925,626287945,174973108,872944580,779160206,818142026,704137718,638111007,883086496,145417529,197872860,157365993,157365993},{1,26,676,17576,456950,11878100,308668100,17245544,92938144,202046228,529741624,500855161,471618284,306488632,94789525,988668208,151997568,826945496,590147181,825313489,684201981,17933423,526216835,866190288,349341410,202015873,518059171,554805125,984382338,536692364,219920092,51084465,915804577,955390598,98465678,554351789,888549755,569007114,593788184,148195692,512632260,751098438,607124252,557138428,43605508,602969297,341373180,743197850,434323743,30692105,198018088,15288287,996906729,149760621,561797312,863305154,352970670,236082938,844563281,452381219,149048821,778930841,467800198,945401107,90654952,561618205,912903107,5730885,477463973,396814703,673929069,827330290,383055294,986044357,214855652,795152459,236737326,651361371,651361371},{1,26,676,17576,456976,11881350,308911850,31464294,803852894,189237604,928072300,141868963,155739572,242743708,357573074,987555111,827972933,537921390,526379381,757137313,400022106,257849646,492050033,712036168,598648441,196990779,81733797,941101066,220826870,963854120,213896822,422176454,18624025,657243447,678301420,112948199,642505330,389844802,131722540,397262546,309008366,292381928,126437751,889874440,869250036,693057040,697580805,415463355,113893512,580710986,831455777,708136603,616872893,19116070,513046433,793488169,915703645,800468240,647994082,772750670,327362826,192165913,606617923,895080123,453550714,858573606,706323607,839550009,774362803,3659547,832160115,774376658,35924452,411737576,657394955,673882557,304031087,849180506,852082293,6559576,991331283,905489979,738786531,918222452,543573371,630040260,842652827,39063247,7507661,540192381,637974891,410483650,544200987,518813734,551741880,443324064,906331415,464448349,306463079,653767888,562224543,29960141,333664494,233347976,233347976},{1,26,676,17576,456976,11881376,308915750,31805544,826602894,468925097,912364952,737114039,548098212,744684402,54774293,100266385,341972112,514212050,642270424,403823303,904453937,494757019,718789403,857910697,387354919,340027457,485337399,846169712,798321983,758223878,383704917,243722090,457474454,277612975,453209129,622486044,432486093,725805275,401470782,83085742,973459196,974823454,12100080,68984429,121714662,226517851,714340230,552945309,374434130,91922457,363766962,509692756,150988477,580435311,733634747,32824396,494323641,337926622,76658471,922112275,493702403,68826222,162841728,240227896,155179125,37303142,974257551,596835503,907926304,658120833,220635056,135941956,810180324,97582140,959399358,369280205,787471111,471466665,668128224,619555246,792505329,417283172,980205055,148512042,707135873,125971598,180312921,133859418,645853546,516399447,723974811,554692532,139384946,34330971,291498908,922531504,538096505,510866305,629644148,618107537,629445915,683938496,159933149,395809630,544104205,651045661,463156496,389537653,919113796,624479610,968358409,490768807,119604693,287384703,385422805,707432475,349829576,168319428,325731275,423567869,772333276,506263131,409268421,928052382,14509611,500558154,853791574,548384239,69006179,735365374,735365374} };

	for (int k = 1; k <= 5; ++k) {
		for (int n = 1; n <= 26 * k; ++n) {
			check.checkInt(expected[k - 1][n], o.keyboard(k, n));
		}
	}
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
