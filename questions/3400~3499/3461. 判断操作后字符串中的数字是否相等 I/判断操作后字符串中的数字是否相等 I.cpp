/* 判断操作后字符串中的数字是否相等 I.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
给你一个由数字组成的字符串 s 。重复执行以下操作，直到字符串恰好包含 两个 数字：

从第一个数字开始，对于 s 中的每一对连续数字，计算这两个数字的和 模 10。
用计算得到的新数字依次替换 s 的每一个字符，并保持原本的顺序。
如果 s 最后剩下的两个数字 相同 ，返回 true 。否则，返回 false。



示例 1：

输入： s = "3902"

输出： true

解释：

一开始，s = "3902"
第一次操作：
(s[0] + s[1]) % 10 = (3 + 9) % 10 = 2
(s[1] + s[2]) % 10 = (9 + 0) % 10 = 9
(s[2] + s[3]) % 10 = (0 + 2) % 10 = 2
s 变为 "292"
第二次操作：
(s[0] + s[1]) % 10 = (2 + 9) % 10 = 1
(s[1] + s[2]) % 10 = (9 + 2) % 10 = 1
s 变为 "11"
由于 "11" 中的数字相同，输出为 true。
示例 2：

输入： s = "34789"

输出： false

解释：

一开始，s = "34789"。
第一次操作后，s = "7157"。
第二次操作后，s = "862"。
第三次操作后，s = "48"。
由于 '4' != '8'，输出为 false。


提示：

3 <= s.length <= 100
s 仅由数字组成。
*/

#include <iostream>
#include "../check/CheckResult.h"

using namespace std;

class Solution {
public:
    bool hasSameDigits(string s) {
        int size = (int)s.size();

        for (int len = size; len > 2; --len) {
            for (int i = 0; i < len - 1; ++i) {
                s[i] = ((s[i] - '0') + (s[i + 1] - '0')) % 10 + '0';
            }
        }

        return s[0] == s[1];
    }
};

int main()
{
    Solution o;
    CheckResult check;

    check.checkBool(true, o.hasSameDigits("3902"));
    check.checkBool(false, o.hasSameDigits("34789"));
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
